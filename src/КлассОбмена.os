//#Использовать json
//#Использовать logos

Перем ТокенАвторизации;
Перем АдресСервиса;
Перем мHTTPСоединение;
Перем ВерсияAPI;

Перем мПарсерJSON; // - модуль
//Перем Лог;		  // - модуль	

///////////////////////////////////////////////////////////////////////////////
//  API сайта abom.ru
//  описание https://abom.ru/apidoc/
//  работа с прайсами https://support.abom.ru/ru/knowledge_base/article/2/category/1/
///////////////////////////////////////////////////////////////////////////////

// 0. Получим версию данных
Функция ПолучитьВерсиюAPIПортала() Экспорт

	Возврат ВыполнитьЗапросHTTPЗапрос("/version", "GET");
	
КонецФункции

// 1. Получение списка складов
// Получение списка складов привязанных к авторизованному контрагенту
// get   storage/get-list
//
// statusCode 	Integer   Код ответа
// error 	Object[]  Текст ошибки
// data 	Object[]  Данные
//    	portal_id 		Integer 	Идентификатор склада
//  	title 	    	String 		Наименование склада
//		complete_term 	Integer 	Типичное количество дней комплектации заказа
//		processing_percent 			Double 	Плата за транзит при исполнении заказов
//		processing_percent_their 	Double 	Плата за транзит при исполнении заказов для своих
//		address 					String 	Адрес склада
Функция ПолучитьСпискСкладов() Экспорт

	Возврат ВыполнитьЗапросHTTPЗапрос("/storage/get-list", "GET");	
	
КонецФункции

// 2. Обновление остатков и цен для склада
// post     product-reserve/update   
// ИД_Склада - Идентификатор склада получен через ПолучитьСпискСкладов();
// ТаблицаПрайса  - Таблица Значений по шаблону reserves
//
//data 	Object 	Данные
//  storage_id 	Integer 	Идентификатор склада
//  reserves 	Object[] 	Данные
//    code 	String 	Код товара
//    quantity 	Integer 	Количество запаса
//    quantity_hidden 	Integer 	Количество запаса для своих (Необязательный)
//    price 	Double 	Цена
//    multiplicity 	Integer 	Кратность
Функция ОбновитьОстаткиЦеныДляСклада(ИД_Склада, ТаблицаПрайса) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;	
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, " ",,,,,,Истина));	
	// ускорим запись
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
		
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("data");				
			
			ЗаписьJSON.ЗаписатьНачалоОбъекта();		
				ЗаписьJSON.ЗаписатьИмяСвойства("storage_id");
				ЗаписьJSON.ЗаписатьЗначение(Строка(ИД_Склада));
							
				ЗаписьJSON.ЗаписатьИмяСвойства("reserves");		
				
				ЗаписьJSON.ЗаписатьНачалоМассива();			
				
				Для Каждого СтрокаТовары из ТаблицаПрайса Цикл 			
				    ЗаписьJSON.ЗаписатьНачалоОбъекта();
					
						ЗаписьJSON.ЗаписатьИмяСвойства("code");
						ЗаписьJSON.ЗаписатьЗначение(СтрокаТовары.code);
						
						ЗаписьJSON.ЗаписатьИмяСвойства("quantity");
						ЗаписьJSON.ЗаписатьЗначение(СтрокаТовары.quantity);
						
						ЗаписьJSON.ЗаписатьИмяСвойства("quantity_hidden");
						ЗаписьJSON.ЗаписатьЗначение(СтрокаТовары.quantity_hidden);
						
						ЗаписьJSON.ЗаписатьИмяСвойства("price");
						ЗаписьJSON.ЗаписатьЗначение(СтрокаТовары.price);
						
						ЗаписьJSON.ЗаписатьИмяСвойства("multiplicity");
						ЗаписьJSON.ЗаписатьЗначение(СтрокаТовары.multiplicity);
						
					ЗаписьJSON.ЗаписатьКонецОбъекта();									
				КонецЦикла;				
				
				ЗаписьJSON.ЗаписатьКонецМассива();
				
			ЗаписьJSON.ЗаписатьКонецОбъекта();			                                                             			
			
		ЗаписьJSON.ЗаписатьКонецОбъекта();
			
		ТелоЗапроса  = ЗаписьJSON.Закрыть();
				
		Возврат ВыполнитьЗапросHTTPЗапрос("product-reserve/update", "POST", ТелоЗапроса);	

КонецФункции

// API - 3. Получение новых входящих заказов
//Получение новых (не помеченных как обработанные) входящих заказов. 
//Также, чтобы заказ вернулся, надо, чтобы в интерфейсе он должен быть либо подтверждён (все элементы), либо отгружен. 
//Насчёт отгружен: д.б. отгружен полностью!!! если отгрузить частично, то этот заказ в методе всё равно не вернётся. API не возвращает отмененные позиции
// get  incoming-order/get-new-orders
// {   "page": 1  }  где page 	Integer Идентификатор страницы
Функция ПолучитьНовыеВходиеЗаказы(ИД_Страницы = "1")
	
	ЗаписьJSON = Новый ЗаписьJSON;	
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, " ",,,,,,Истина));	
	// ускорим запись
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
		
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("page");
		ЗаписьJSON.ЗаписатьЗначение(Строка(ИД_Страницы));				
	ЗаписьJSON.ЗаписатьКонецОбъекта(); 
	
	ТелоЗапроса  = ЗаписьJSON.Закрыть();
	
	Возврат ВыполнитьЗапросHTTPЗапрос("/incoming-order/get-new-orders", "GET", ТелоЗапроса);
	
КонецФункции

//API - 4. Отметка входящего заказа(ов) как обработанного
// post  incoming-order/mark-processed
// data  Object 	Данные
//   order_id 	Integer 	Идентификатор заказа
Функция ОтметитьВходящийЗаказОбработан(ИД_Заказа) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;	
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, " ",,,,,,Истина));	
	// ускорим запись
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
		
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("data");				
			
			ЗаписьJSON.ЗаписатьНачалоОбъекта();		
				ЗаписьJSON.ЗаписатьИмяСвойства("order_id");
				ЗаписьJSON.ЗаписатьЗначение(Строка(ИД_Заказа));
			ЗаписьJSON.ЗаписатьКонецОбъекта();;	
			
	ЗаписьJSON.ЗаписатьКонецОбъекта();
			
	ТелоЗапроса  = ЗаписьJSON.Закрыть();
	
	
	Возврат ВыполнитьЗапросHTTPЗапрос("/incoming-order/mark-processed", "POST", ТелоЗапроса);
	
КонецФункции

//API - 5. Отгрузка позиций
//  Отгрузка позиций (определяющихся по идентификатору эталона “standard_id”) входящего заказа 
//по его идентификатору полученного методом incoming-order/get-new-orders. 
//Примечание: согласно задаче http://jira.tk-alpha.ru/browse/BOM-1649 при отгрузке одного и того же standard_id,
//но указании разного тарного места (container_number), должна создаться одна отгрузка, но с разбиением строк. 
//Во входящем заказе строки тоже должны разбиться.
//    post  incoming-order/shipment
//
//data 	Object 	Данные
//  order_id 	    Integer 	Идентификатор заказа
//  upd_number 	    String 	    Номер ТОРГ-12/УПД
//  invoice_number 	String 		Номер счёт-фактуры
//  external_id 	String 		Внешний идентификатор отгрузки(Необязательный)
//  driver_last_name String 	Фамилия водителя(Необязательный)
//  driver_first_name 	String 	Имя водителя(Необязательный)
//  driver_middle_name 	String 	Отчество водителя(Необязательный)
//  driver_phone 		String 	Номер телефона водителя(Необязательный)
//  truck_model 		String 	Марка автомобиля(Необязательный)
//  truck_number 		String 	Регистрационный знак(Необязательный)
//  truck_tonnage 		Integer Тоннаж(Необязательный)
//  shipment_date 		String 	Дата отгрузки(Необязательный)
//  arrival_date 		String 	Дата прибытия(Необязательный)
//  arrival_time 		String 	Время прибытия(Необязательный)
//  containers_count 	Integer Кол-во тарных мест(Необязательный)
//  	items 	Object[] 	Массив позиций
//    		standard_id 	Integer 	Идентификатор эталона
//			quantity 		Integer 	Кол-во
//    		container_number String 	Номер тарного места
Функция ОтгрузкаПозиций() Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;	
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, " ",,,,,,Истина));	
	// ускорим запись
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
		
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
		//ЗаписьJSON.ЗаписатьИмяСвойства("data");				
		//	
		//	ЗаписьJSON.ЗаписатьНачалоОбъекта();		
		//		ЗаписьJSON.ЗаписатьИмяСвойства("order_id");
		//		ЗаписьJSON.ЗаписатьЗначение(Строка(ИД_Заказа));
		//	ЗаписьJSON.ЗаписатьКонецОбъекта();;	
			
	ЗаписьJSON.ЗаписатьКонецОбъекта();
			
	ТелоЗапроса  = ЗаписьJSON.Закрыть(); 	
	
	Возврат ВыполнитьЗапросHTTPЗапрос("/incoming-order/shipment", "POST", ТелоЗапроса);	
	
КонецФункции

// API - 6. Создание отказа
//Создание отказа от поставки позиций входящего заказа.
// post  incoming-order/create-refusal
//data 	Object 	Данные
//  incoming_order_id 	Integer 	Идентификатор заказа
// !нет в документации! "external_id": "23425",    //это идентификатор 1С (или кого угодно), мы заполняем любым значением
//  items 	Object[] 	Массив позиций
//	standard_id 	Integer 	Идентификатор эталона
//    quantity 	Integer 	Кол-во
//    refusal_reason 	String 	Причина отказа
Функция СозданиеОтказа(ИД_Заказа) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;	
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, " ",,,,,,Истина));	
	// ускорим запись
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
		
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
		//ЗаписьJSON.ЗаписатьИмяСвойства("data");				
		//	
		//	ЗаписьJSON.ЗаписатьНачалоОбъекта();		
		//		ЗаписьJSON.ЗаписатьИмяСвойства("order_id");
		//		ЗаписьJSON.ЗаписатьЗначение(Строка(ИД_Заказа));
		//	ЗаписьJSON.ЗаписатьКонецОбъекта();;	
			
	ЗаписьJSON.ЗаписатьКонецОбъекта();
			
	ТелоЗапроса  = ЗаписьJSON.Закрыть(); 	
	
	Возврат ВыполнитьЗапросHTTPЗапрос("/incoming-order/create-refusal", "POST", ТелоЗапроса);	
	
КонецФункции

//API - 7. Разделение строк по количеству в документе входящего заказа
// Разделение строк по количеству в документе входящего заказа. Количество ( "quantity" ) указываем той строки, 
//которую собираемся делить. Если есть несколько строк с одинаковым кол-вом у одинакового эталона, то берётся первая попавшаяся строка с этим кол-вом у этого эталона.
//		post	incoming-order/split-items
Функция РазделениеСтрокВходящегоЗаказа(ИД_Заказа) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;	
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, " ",,,,,,Истина));	
	// ускорим запись
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
		
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
		//ЗаписьJSON.ЗаписатьИмяСвойства("data");				
		//	
		//	ЗаписьJSON.ЗаписатьНачалоОбъекта();		
		//		ЗаписьJSON.ЗаписатьИмяСвойства("order_id");
		//		ЗаписьJSON.ЗаписатьЗначение(Строка(ИД_Заказа));
		//	ЗаписьJSON.ЗаписатьКонецОбъекта();;	
			
	ЗаписьJSON.ЗаписатьКонецОбъекта();
			
	ТелоЗапроса  = ЗаписьJSON.Закрыть(); 	
	
	Возврат ВыполнитьЗапросHTTPЗапрос("/incoming-order/split-items", "POST", ТелоЗапроса);	
	
КонецФункции

//API - 8. Получение новых исходящих заказов
//Получить список новых(не помеченных как обработанные) исходящих заказов.
//Ограничение: будет возвращено 20 заказов
//	get		outgoing-order/get-new-orders
Функция ПолучениеНовыхИсходящихЗаказов() Экспорт
		
	Возврат ВыполнитьЗапросHTTPЗапрос("/outgoing-order/get-new-orders", "GET");	
	
КонецФункции

//API - 9. Отметка исходящего заказа(ов) как обработанного
//Отметка исходящего заказа(ов) как обработанного
//	post	outgoing-order/mark-processed
//
//data 	Object 	Данные
//  order_id 	Integer Идентификатор заказа
Функция ОтметкаИсходящегоЗаказаОбработанного(ИД_Заказа) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;	
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, " ",,,,,,Истина));	
	// ускорим запись
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
		
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
		//ЗаписьJSON.ЗаписатьИмяСвойства("data");				
		//	
		//	ЗаписьJSON.ЗаписатьНачалоОбъекта();		
		//		ЗаписьJSON.ЗаписатьИмяСвойства("order_id");
		//		ЗаписьJSON.ЗаписатьЗначение(Строка(ИД_Заказа));
		//	ЗаписьJSON.ЗаписатьКонецОбъекта();;	
			
	ЗаписьJSON.ЗаписатьКонецОбъекта();
			
	ТелоЗапроса  = ЗаписьJSON.Закрыть(); 	
	
	Возврат ВыполнитьЗапросHTTPЗапрос("/outgoing-order/mark-processed", "POST", ТелоЗапроса);	
	
КонецФункции

//API - 10. Получение новых(не помеченных как обработанные) документов отказ
//Получение новых(не помеченных как обработанные) документов отказ.
//Ограничение: будет возвращено 20 заказов
//	get		document-refusal/get-new-refusals
Функция ПолучениеНовыхДокументовОтказ() Экспорт
		
	Возврат ВыполнитьЗапросHTTPЗапрос("/document-refusal/get-new-refusals", "GET");	
	
КонецФункции

//API - 11. Отметка отказа(ов) как обработанного
// Отметка отказа(ов) как обработанного
//	post	document-refusal/mark-processed
//
//data 	Object 	Данные
//  document_refusal_id 	Integer 	Идентификатор отказа
Функция ОтметкаОтказаКакОбработанного(ИД_Заказа) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;	
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, " ",,,,,,Истина));	
	// ускорим запись
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
		
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
		//ЗаписьJSON.ЗаписатьИмяСвойства("data");				
		//	
		//	ЗаписьJSON.ЗаписатьНачалоОбъекта();		
		//		ЗаписьJSON.ЗаписатьИмяСвойства("order_id");
		//		ЗаписьJSON.ЗаписатьЗначение(Строка(ИД_Заказа));
		//	ЗаписьJSON.ЗаписатьКонецОбъекта();;	
			
	ЗаписьJSON.ЗаписатьКонецОбъекта();
			
	ТелоЗапроса  = ЗаписьJSON.Закрыть(); 	
	
	Возврат ВыполнитьЗапросHTTPЗапрос("/document-refusal/mark-processed", "POST", ТелоЗапроса);	
	
КонецФункции

//API - 12. Получение новых отгрузок
//Получить список новых(не помеченных как обработанных) документов отгрузка.
// Ограничение: будет возвращено 20 заказов
//	get		shipment/get-new-shipments
Функция ПолучениеНовыхОтгрузок() Экспорт
		
	Возврат ВыполнитьЗапросHTTPЗапрос("/shipment/get-new-shipments", "GET");	
	
КонецФункции

//API - 13. Пометить отгрузки как обработанные
// Пометить отгрузки как обработанные
//	post	shipment/mark-processed
//
//data 	Object 	Данные
//  document_shipment_id 	Integer 	Идентификатор отгрузки
Функция ПометитьОтгрузкиКакОбработанные(ИД_Заказа) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;	
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, " ",,,,,,Истина));	
	// ускорим запись
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
		
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
		//ЗаписьJSON.ЗаписатьИмяСвойства("data");				
		//	
		//	ЗаписьJSON.ЗаписатьНачалоОбъекта();		
		//		ЗаписьJSON.ЗаписатьИмяСвойства("order_id");
		//		ЗаписьJSON.ЗаписатьЗначение(Строка(ИД_Заказа));
		//	ЗаписьJSON.ЗаписатьКонецОбъекта();;	
			
	ЗаписьJSON.ЗаписатьКонецОбъекта();
			
	ТелоЗапроса  = ЗаписьJSON.Закрыть(); 	
	
	Возврат ВыполнитьЗапросHTTPЗапрос("/shipment/mark-processed", "POST", ТелоЗапроса);	
	
КонецФункции

//API - 14. Получение новых приемок
//Получить список(не помеченных как обработанные) документов приемка
//Ограничение: будет возвращено 20 приемок
//	get	acceptance/get-new-acceptances
Функция ПолучениеНовыхПриемок() Экспорт
		
	Возврат ВыполнитьЗапросHTTPЗапрос("/acceptance/get-new-acceptances", "GET");	
	
КонецФункции

//API - 15. Отметка примемки как обработанной
// Отметка примемки как обработанной
//	post	acceptance/mark-processed
//
//data 	Object 	Данные
//  document_acceptance_id 	Integer Идентификатор приемки
Функция ОтметкаПримемкиКакОбработанной(ИД_Заказа) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;	
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, " ",,,,,,Истина));	
	// ускорим запись
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
		
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
		//ЗаписьJSON.ЗаписатьИмяСвойства("data");				
		//	
		//	ЗаписьJSON.ЗаписатьНачалоОбъекта();		
		//		ЗаписьJSON.ЗаписатьИмяСвойства("order_id");
		//		ЗаписьJSON.ЗаписатьЗначение(Строка(ИД_Заказа));
		//	ЗаписьJSON.ЗаписатьКонецОбъекта();;	
			
	ЗаписьJSON.ЗаписатьКонецОбъекта();
			
	ТелоЗапроса  = ЗаписьJSON.Закрыть(); 	
	
	Возврат ВыполнитьЗапросHTTPЗапрос("/acceptance/mark-processed", "POST", ТелоЗапроса);	
	
КонецФункции

//API - 16. Принять позиции документа приемки, по идентификатору эталона
//Принять позиции документа приемки, по идентификатору эталона.
//	post	acceptance/accept
//
//data 	Object 	Данные
//  document_acceptance_id 	Integer 	Идентификатор приемки
//  items 	Object[] 	Массив позиций документа которые необходимо принять
//    standard_id 	Integer 	Идентификатор эталона
Функция ПринятьПозицииДокументаПриемки(ИД_Заказа) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;	
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, " ",,,,,,Истина));	
	// ускорим запись
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
		
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
		//ЗаписьJSON.ЗаписатьИмяСвойства("data");				
		//	
		//	ЗаписьJSON.ЗаписатьНачалоОбъекта();		
		//		ЗаписьJSON.ЗаписатьИмяСвойства("order_id");
		//		ЗаписьJSON.ЗаписатьЗначение(Строка(ИД_Заказа));
		//	ЗаписьJSON.ЗаписатьКонецОбъекта();;	
			
	ЗаписьJSON.ЗаписатьКонецОбъекта();
			
	ТелоЗапроса  = ЗаписьJSON.Закрыть(); 	
	
	Возврат ВыполнитьЗапросHTTPЗапрос("/acceptance/accept", "POST", ТелоЗапроса);	
	
КонецФункции


//API - 18. Обновление лимитов для договора
//Обновление лимитов для договора
//	post	contract/update-limits
//
//data 	Object 	Данные
//  contractor_id 	Integer 	Идентификатор контрагента
//  daily_limit 	Decimal 	Сумма дневного лимита
//  request_amount_limit Decimal 	Лимит на единовременную закупку
//  total_limit 		 Decimal 	Общий лимит
//  limit_type 			 String 	Тип лимита
//  is_storage_limit 	 Boolean 	Переключатель в дневном лимите (общий/на склад)
Функция ОбновлениеЛимитовДляДоговора(ИД_Заказа) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;	
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, " ",,,,,,Истина));	
	// ускорим запись
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
		
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
		//ЗаписьJSON.ЗаписатьИмяСвойства("data");				
		//	
		//	ЗаписьJSON.ЗаписатьНачалоОбъекта();		
		//		ЗаписьJSON.ЗаписатьИмяСвойства("order_id");
		//		ЗаписьJSON.ЗаписатьЗначение(Строка(ИД_Заказа));
		//	ЗаписьJSON.ЗаписатьКонецОбъекта();;	
			
	ЗаписьJSON.ЗаписатьКонецОбъекта();
			
	ТелоЗапроса  = ЗаписьJSON.Закрыть(); 	
	
	Возврат ВыполнитьЗапросHTTPЗапрос("/contract/update-limits", "POST", ТелоЗапроса);	
	
КонецФункции
//data 	Object Данные
//  contractor_id 	Integer 	Идентификатор контрагента
//  limit_type 	String 	Тип лимита
//  limit_value 	Decimal 	Сумма лимита указанного типа
//  is_storage_limit 	Boolean 	Переключатель в дневном лимите (общий/на склад)
// post contract/update-limit-by-type
Функция ОбновлениеЛимитовДляДоговораНовый(ИД_Заказа) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;	
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, " ",,,,,,Истина));	
	// ускорим запись
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
		
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
		//ЗаписьJSON.ЗаписатьИмяСвойства("data");				
		//	
		//	ЗаписьJSON.ЗаписатьНачалоОбъекта();		
		//		ЗаписьJSON.ЗаписатьИмяСвойства("order_id");
		//		ЗаписьJSON.ЗаписатьЗначение(Строка(ИД_Заказа));
		//	ЗаписьJSON.ЗаписатьКонецОбъекта();;	
			
	ЗаписьJSON.ЗаписатьКонецОбъекта();
			
	ТелоЗапроса  = ЗаписьJSON.Закрыть(); 	
	
	Возврат ВыполнитьЗапросHTTPЗапрос("/contract/update-limit-by-type", "POST", ТелоЗапроса);	
	
КонецФункции

//API - 19. Приостановка договора
//Обновление лимитов для договора
//	post	contract/suspense
//
//data 	Object 	Данные
//  contractor_id 	Integer 	Идентификатор контрагента
Функция ПриостановкаДоговора(ИД_Заказа) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;	
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, " ",,,,,,Истина));	
	// ускорим запись
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
		
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
		//ЗаписьJSON.ЗаписатьИмяСвойства("data");				
		//	
		//	ЗаписьJSON.ЗаписатьНачалоОбъекта();		
		//		ЗаписьJSON.ЗаписатьИмяСвойства("order_id");
		//		ЗаписьJSON.ЗаписатьЗначение(Строка(ИД_Заказа));
		//	ЗаписьJSON.ЗаписатьКонецОбъекта();;	
			
	ЗаписьJSON.ЗаписатьКонецОбъекта();
			
	ТелоЗапроса  = ЗаписьJSON.Закрыть(); 	
	
	Возврат ВыполнитьЗапросHTTPЗапрос("/contract/suspense", "POST", ТелоЗапроса);	
	
КонецФункции

//API - 20. Включение/отключение автоподтверждения входящих заказов.
//Включение/отключение автоподтверждения входящих заказов.
//	post	contract/auto-acceptance
//
//data 	Object 	Данные
//  contractor_id 	Integer 	Идентификатор контрагента
//  auto_accept 	Boolean 	Автоподтверждение
Функция ИзменитьАвтоподтвержденияВходящихЗаказов(ИД_Заказа) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;	
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, " ",,,,,,Истина));	
	// ускорим запись
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
		
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
		//ЗаписьJSON.ЗаписатьИмяСвойства("data");				
		//	
		//	ЗаписьJSON.ЗаписатьНачалоОбъекта();		
		//		ЗаписьJSON.ЗаписатьИмяСвойства("order_id");
		//		ЗаписьJSON.ЗаписатьЗначение(Строка(ИД_Заказа));
		//	ЗаписьJSON.ЗаписатьКонецОбъекта();;	
			
	ЗаписьJSON.ЗаписатьКонецОбъекта();
			
	ТелоЗапроса  = ЗаписьJSON.Закрыть(); 	
	
	Возврат ВыполнитьЗапросHTTPЗапрос("/contract/auto-acceptance", "POST", ТелоЗапроса);	
	
КонецФункции

//API - 21. Очитска прайс-листа
//Очитска прайс-листа.
//	post	price-list/clear
//
//data 	Object 	Данные
//  price_list_id 	Integer 	Идентификатор прайс-листа
Функция ОчитскаПрайсЛиста(ИД_Заказа) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;	
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, " ",,,,,,Истина));	
	// ускорим запись
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
		
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
		//ЗаписьJSON.ЗаписатьИмяСвойства("data");				
		//	
		//	ЗаписьJSON.ЗаписатьНачалоОбъекта();		
		//		ЗаписьJSON.ЗаписатьИмяСвойства("order_id");
		//		ЗаписьJSON.ЗаписатьЗначение(Строка(ИД_Заказа));
		//	ЗаписьJSON.ЗаписатьКонецОбъекта();;	
			
	ЗаписьJSON.ЗаписатьКонецОбъекта();
			
	ТелоЗапроса  = ЗаписьJSON.Закрыть(); 	
	
	Возврат ВыполнитьЗапросHTTPЗапрос("/price-list/clear", "POST", ТелоЗапроса);	
	
КонецФункции

// 22. Импорт позиций прайс-листа
// Импорт позиций прайс-листа.
// post price-list/import
//
// data Object  Данные
// price_list_id 	Integer 	Идентификатор прайс-листа
// items 	Object 	Позиции
//    code 	String 	Код номенклатуры
//    price Double 	Цена
//    multiplicity 	Integer Норма поставки
Функция ИмпортПозицийПрайсЛиста(price_list_id) Экспорт
	
	Возврат ВыполнитьЗапросHTTPЗапрос("/post price-list/impor", "POST");	
	
КонецФункции


//API - 23. Обновление остатков для склада (без обновления цен)
//Обновление остатков для склада определяемого по передаваемому идентификатору (storage_id) полученному
//методом storage/get-list. Резервы обновляются на основе загруженной номенклатуры которая определяется по коду (product_code).
//	post	product-reserve/update-quantity
//
//data 	Object 	Данные
//  storage_id 	Integer 	Идентификатор склада
//  reserves 	Object[] 	Данные
//    code 	String 	Код товара
//    quantity 	Integer 	Количество запаса
//    quantity_hidden 	Integer 	Количество запаса для своих (Необязательный)
//    multiplicity 	Integer 	Норма поставки(кратность) (Необязательный)
Функция ОбновлениеОстатковСкладаБезЦен(ИД_Заказа) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;	
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, " ",,,,,,Истина));	
	// ускорим запись
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
		
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
		//ЗаписьJSON.ЗаписатьИмяСвойства("data");				
		//	
		//	ЗаписьJSON.ЗаписатьНачалоОбъекта();		
		//		ЗаписьJSON.ЗаписатьИмяСвойства("order_id");
		//		ЗаписьJSON.ЗаписатьЗначение(Строка(ИД_Заказа));
		//	ЗаписьJSON.ЗаписатьКонецОбъекта();;	
			
	ЗаписьJSON.ЗаписатьКонецОбъекта();
			
	ТелоЗапроса  = ЗаписьJSON.Закрыть(); 	
	
	Возврат ВыполнитьЗапросHTTPЗапрос("/product-reserve/update-quantity", "POST", ТелоЗапроса);	
	
КонецФункции

//API - 24. Получение идентификатора контрагента по коду
//Получение идентификатора контрагента по коду
//	post	contractor/get-contractor-id
//
//data 	Object 	Данные
//  contractor_code 	String 	Код контрагента
Функция ПолучениеИдентификатораКонтрагентаПоКоду(ИД_Заказа) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;	
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, " ",,,,,,Истина));	
	// ускорим запись
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
		
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
		//ЗаписьJSON.ЗаписатьИмяСвойства("data");				
		//	
		//	ЗаписьJSON.ЗаписатьНачалоОбъекта();		
		//		ЗаписьJSON.ЗаписатьИмяСвойства("order_id");
		//		ЗаписьJSON.ЗаписатьЗначение(Строка(ИД_Заказа));
		//	ЗаписьJSON.ЗаписатьКонецОбъекта();;	
			
	ЗаписьJSON.ЗаписатьКонецОбъекта();
			
	ТелоЗапроса  = ЗаписьJSON.Закрыть(); 	
	
	Возврат ВыполнитьЗапросHTTPЗапрос("/contractor/get-contractor-id", "POST", ТелоЗапроса);	
	
КонецФункции





///////////////////   Стандартные Процедуры

Процедура Инициализировать(Тест = Ложь) Экспорт  

	//мПарсерJSON = ПолучитьФорму("json");	
	
	Если Тест = Истина Тогда		
		АдресСервиса = "api-test4.tk-alpha.ru";	  	    
	Иначе
		АдресСервиса = "api.1bom.ru";
	КонецЕсли;
	
	мHTTPСоединение = Новый HTTPСоединение(АдресСервиса);
	
	//Лог = Логирование.ПолучитьЛог("oscript.lib.1bom-ru");
	
КонецПроцедуры

Процедура УстановитьТокенАвторизации(Токен) Экспорт
    ТокенАвторизации = Токен;
КонецПроцедуры

Функция ПолучитьАдресСервиса() Экспорт
    Возврат АдресСервиса; 
КонецФункции

Функция СформироватьHTTPЗаголовки(ДобавлятьТокенАвторизации=Истина)
    Заголовки = Новый Соответствие();
    Заголовки.Вставить("Accept", 		"application/json");
    Заголовки.Вставить("Content-Type",  "application/json");
    Возврат Заголовки;
КонецФункции

Функция ВыполнитьЗапросHTTPЗапрос(Ресурс, ТипHTTPЗапроса = "POST", ТелоЗапроса =  Неопределено)    
	
	ПараметрыЗапроса = Новый Соответствие();
    ПараметрыЗапроса.Вставить("access-token", ТокенАвторизации);
	
	АдресРесурса = ПолучитьАдресРесурса(Ресурс, ПараметрыЗапроса);
	HTTPЗаголовок= СформироватьHTTPЗаголовки();
		
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, HTTPЗаголовок);
	
	Если ТелоЗапроса <> Неопределено Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли;
	
    //Лог.Отладка(ПолучитьАдресРесурса(Ресурс, ПараметрыЗапроса));

	Если ВРег(ТипHTTPЗапроса) = "POST" тогда
		HTTPОтвет = мHTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	ИначеЕсли ВРег(ТипHTTPЗапроса) = "GET" тогда
		HTTPОтвет = мHTTPСоединение.Получить(HTTPЗапрос);
	Иначе 
		ВызватьИсключение ИсключениеРаботыСПорталом(HTTPОтвет, "ВыполнитьЗапросHTTPЗапрос_не_верныйТип_Запроса");
	КонецЕсли;	

    Если HTTPОтвет.КодСостояния = 200 Тогда        
        СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		
		Если Лев(СтрокаОтвета, 6)="<html>" тогда
		//Вместо ожидаемой строки JSON сервер вернул HTML с ошибкой, прочитать её
			ЧтениеHTML = Новый ЧтениеHTML;
			ЧтениеHTML.УстановитьСтроку(СтрокаОтвета);
			//  ответы маленькие по этому используем ДОМ
			ПостроительDOM = Новый ПостроительDOM;
			ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);
			
			Данные = Новый Структура;
			Данные.Вставить("data" , Неопределено);
			Данные.Вставить("error" , Сред(ДокументHTML.Заголовок, 4) ); //Описание ошибки из заголовка
			Данные.Вставить("statusCode", Лев (ДокументHTML.Заголовок, 3)); //Код ответа
			Данные.Вставить("СтрокаОтвета", СтрокаОтвета); ///Для записи запроса и ответа в журнал в случае ошибки
			
			Возврат Данные;
		Иначе  
			//Лог.Отладка(СтрокаОтвета);
			//Объект =  мПарсерJSON.ПрочитатьJSON_OS(СтрокаОтвета,,,Истина);
			//Возврат Объект;
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(СтрокаОтвета); 
			ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
			ДанныеJSON.Вставить("СтрокаОтвета", СтрокаОтвета); ///Для записи запроса и ответа в журнал в случае ошибки
			
			Возврат ДанныеJSON;
		КонецЕсли;
		
	КонецЕсли;

    ВызватьИсключение ИсключениеРаботыСПорталом(HTTPОтвет, "ВыполнитьЗапросHTTPЗапрос");
КонецФункции

Функция ПолучитьАдресРесурса(Ресурс, ПараметрыЗапроса=Неопределено, Относительный=Истина) Экспорт

    СтрокаЗапроса = ?(ПараметрыЗапроса = Неопределено, "", СформироватьСтрокуЗапроса(ПараметрыЗапроса));
    Если НЕ ПустаяСтрока(СтрокаЗапроса) Тогда
        СтрокаЗапроса = "?" + СтрокаЗапроса;
    КонецЕсли;

    Возврат ?(Относительный, "", ПолучитьАдресСервиса()) + Ресурс + СтрокаЗапроса; 

КонецФункции

Функция ИсключениеРаботыСПорталом(HTTPОтвет, МеткаДляОтладки="")
    ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
    
	Попытка 
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТелоОтвета); 
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		
		
        ОбъектОшибки = ДанныеJSON; // мПарсерJSON.ПрочитатьJSON_OS(ТелоОтвета,,,Истина);
        ОписаниеОшибки = ОбъектОшибки.description;
    Исключение
        ОписаниеОшибки = ТелоОтвета;
    КонецПопытки;
    
   ТекстИсключения = СтрШаблон("Портал ответил кодом ошибки %1: %2", HTTPОтвет.КодСостояния, ОписаниеОшибки);
	//ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Портал ответил кодом ошибки %1: %2", HTTPОтвет.КодСостояния, ОписаниеОшибки);

    //Лог.Ошибка(?(ПустаяСтрока(МеткаДляОтладки), "", " [" + МеткаДляОтладки + "] ") + ТекстИсключения);
    
    Возврат ТекстИсключения;
КонецФункции

// Формирует строку запроса в формате URL-encoded (query string)
Функция СформироватьСтрокуЗапроса(ПараметрыЗапроса) Экспорт
    СтрокаЗапроса = "";
    
    Если ПараметрыЗапроса.Количество() > 0 Тогда
        Для каждого Элемент из ПараметрыЗапроса Цикл
            Если НЕ ПустаяСтрока(СтрокаЗапроса) Тогда
                СтрокаЗапроса = СтрокаЗапроса + "&";
            КонецЕсли;
            СтрокаЗапроса = СтрокаЗапроса + КодироватьСтроку(Элемент.Ключ, СпособКодированияСтроки.КодировкаURL) + 
                "=" + КодироватьСтроку(Значение1СвЗначениеJS(Элемент.Значение), СпособКодированияСтроки.КодировкаURL);
        КонецЦикла;
    КонецЕсли;
    
    Возврат СтрокаЗапроса;
КонецФункции

Функция СформироватьСтруктуруПараметровЗапроса(СтрокаИменДопустимыхПараметров, СтруктураОбязательныхПараметров, СтруктураДополнительныхПараметров=Неопределено) Экспорт
    СтруктураПараметровЗапроса    = Новый Структура;
    СтруктураДопустимыхПараметров = Новый Структура(СтрокаИменДопустимыхПараметров);

    Если СтруктураОбязательныхПараметров <> Неопределено Тогда
        ДобавитьПараметры(СтруктураПараметровЗапроса, СтруктураОбязательныхПараметров, СтруктураДопустимыхПараметров);
    КонецЕсли;

    Если СтруктураДополнительныхПараметров <> Неопределено Тогда
        ДобавитьПараметры(СтруктураПараметровЗапроса, СтруктураДополнительныхПараметров, СтруктураДопустимыхПараметров);
    КонецЕсли;

    Возврат СтруктураПараметровЗапроса;
КонецФункции

Процедура ДобавитьПараметры(СтруктураПараметровЗапроса, СтруктураСоЗначениямиПараметров, СтруктураДопустимыхПараметров)
    Для каждого ЭлементСтруктуры из СтруктураСоЗначениямиПараметров Цикл        
        Если НЕ СтруктураДопустимыхПараметров.Свойство(ЭлементСтруктуры.Ключ) Тогда
            ВызватьИсключение ИсключениеНедопустимыйПараметрЗапроса(ЭлементСтруктуры.Ключ);
        КонецЕсли;                       
        СтруктураПараметровЗапроса.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
    КонецЦикла;
КонецПроцедуры

Функция Значение1СвЗначениеJS(Значение)
    Тип = ТипЗнч(Значение);
    Если (Значение = Неопределено) или (Значение = Null) Тогда 
        Возврат "null";
    ИначеЕсли (Тип = Тип("Дата")) Тогда 
        Возврат """" + ДатаJSON(Значение) + "Z""";
    ИначеЕсли Тип = Тип("Булево") Тогда
        Возврат ?(Значение = Истина, "true", "false");
    ИначеЕсли (Тип = Тип("УникальныйИдентификатор")) Тогда 
        Возврат """" + Значение + """"; 
    КонецЕсли;
    Возврат Строка(Значение);
КонецФункции

Функция ДатаJSON(Знач Дата)
    
    Если Не ЗначениеЗаполнено(Дата) Тогда
        Возврат "";
    КонецЕсли;
    
    Возврат "" + Год(Дата) + "-" + ФорматДвузначноеЧисло(Месяц(Дата)) + "-" + ФорматДвузначноеЧисло(День(Дата)) + "T"
            + ФорматДвузначноеЧисло(Час(Дата)) + ":" + ФорматДвузначноеЧисло(Минута(Дата)) + ":" + ФорматДвузначноеЧисло(Секунда(Дата));

КонецФункции

Функция ФорматДвузначноеЧисло(ЗначениеЧисло)
    С = Строка(ЗначениеЧисло);
    Если СтрДлина(С) < 2 Тогда
        С = "0" + С;
    КонецЕсли;    
    Возврат С;
КонецФункции

Функция ИсключениеНедопустимыйПараметрЗапроса(ИмяПараметра)
    Возврат "В запрос передан недопустимый параметр " + ИмяПараметра;
КонецФункции

//Инициализировать();