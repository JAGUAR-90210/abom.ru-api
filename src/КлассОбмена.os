//#Использовать json
//#Использовать logos

Перем ТокенАвторизации;
Перем АдресСервиса;
Перем мHTTPСоединение;
Перем ВерсияAPI;

Перем мПарсерJSON; // - модуль
//Перем Лог;		  // - модуль	

///////////////////////////////////////////////////////////////////////////////
//  API сайта abom.ru
///////////////////////////////////////////////////////////////////////////////

// 0. Получим версию данных
Функция ПолучитьВерсиюAPIПортала() Экспорт

	Возврат ВыполнитьЗапросHTTPЗапрос("/version", "GET");
	
КонецФункции


// 1. Получение списка складов
// Получение списка складов привязанных к авторизованному контрагенту
// get   storage/get-list
//
// statusCode 	Integer   Код ответа
// error 	Object[]  Текст ошибки
// data 	Object[]  Данные
//    	portal_id 		Integer 	Идентификатор склада
//  	title 	    	String 		Наименование склада
//		complete_term 	Integer 	Типичное количество дней комплектации заказа
//		processing_percent 			Double 	Плата за транзит при исполнении заказов
//		processing_percent_their 	Double 	Плата за транзит при исполнении заказов для своих
//		address 					String 	Адрес склада
Функция ПолучитьСпискСкладов() Экспорт

	Возврат ВыполнитьЗапросHTTPЗапрос("/storage/get-list", "GET");	
	
КонецФункции


// 2. Обновление остатков и цен для склада
// post     product-reserve/update   
// ИД_Склада - Идентификатор склада получен через ПолучитьСпискСкладов();
// ТаблицаПрайса  - Таблица Значений по шаблону reserves
//
//data 	Object 	Данные
//  storage_id 	Integer 	Идентификатор склада
//  reserves 	Object[] 	Данные
//    code 	String 	Код товара
//    quantity 	Integer 	Количество запаса
//    quantity_hidden 	Integer 	Количество запаса для своих (Необязательный)
//    price 	Double 	Цена
//    multiplicity 	Integer 	Кратность
Функция ОбновитьОстаткиЦеныДляСклада(ИД_Склада, ТаблицаПрайсаJSON) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;	
ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, " ",,,,,,Истина));	
//ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	
ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("data");				
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();		
			ЗаписьJSON.ЗаписатьИмяСвойства("storage_id");
			ЗаписьJSON.ЗаписатьЗначение("215");
			
			
			ЗаписьJSON.ЗаписатьИмяСвойства("reserves");		
			
			ЗаписьJSON.ЗаписатьНачалоМассива();			
			    ЗаписьJSON.ЗаписатьНачалоОбъекта();
				
					ЗаписьJSON.ЗаписатьИмяСвойства("code");
					ЗаписьJSON.ЗаписатьЗначение("243214v");
					
					ЗаписьJSON.ЗаписатьИмяСвойства("quantity");
					ЗаписьJSON.ЗаписатьЗначение("23897");
					
					ЗаписьJSON.ЗаписатьИмяСвойства("quantity_hidden");
					ЗаписьJSON.ЗаписатьЗначение(13);
					
					ЗаписьJSON.ЗаписатьИмяСвойства("price");
					ЗаписьJSON.ЗаписатьЗначение(75.57);
					
					ЗаписьJSON.ЗаписатьИмяСвойства("multiplicity");
					ЗаписьJSON.ЗаписатьЗначение(1);
					
				ЗаписьJSON.ЗаписатьКонецОбъекта();									
				
				
				
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
				
					ЗаписьJSON.ЗаписатьИмяСвойства("code");
					ЗаписьJSON.ЗаписатьЗначение("243214v");
					
					ЗаписьJSON.ЗаписатьИмяСвойства("quantity");
					ЗаписьJSON.ЗаписатьЗначение("23897");
					
					ЗаписьJSON.ЗаписатьИмяСвойства("quantity_hidden");
					ЗаписьJSON.ЗаписатьЗначение(13);
					
					ЗаписьJSON.ЗаписатьИмяСвойства("price");
					ЗаписьJSON.ЗаписатьЗначение(75.57);
					
					ЗаписьJSON.ЗаписатьИмяСвойства("multiplicity");
					ЗаписьJSON.ЗаписатьЗначение(1);
					
				ЗаписьJSON.ЗаписатьКонецОбъекта();	
				
				
			
			ЗаписьJSON.ЗаписатьКонецМассива();
			
		ЗаписьJSON.ЗаписатьКонецОбъекта();			                                                             			
		
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	
	
	ТелоЗапроса  = ЗаписьJSON.Закрыть();
	
	Сообщить(ТелоЗапроса);
	
	
	
	//Возврат ВыполнитьЗапросHTTPЗапрос("product-reserve/update", "post", ТелоЗапроса);	

КонецФункции













///////////////////   Стандартные Процедуры

Процедура Инициализировать(Тест = Ложь) Экспорт  

	мПарсерJSON = ПолучитьФорму("json");	
	
	Если Тест = Истина Тогда		
		АдресСервиса = "http://api-test4.tk-alpha.ru";	  	    
	Иначе
		АдресСервиса = "api.1bom.ru";
	КонецЕсли;
	
	мHTTPСоединение = Новый HTTPСоединение(АдресСервиса);
	
	//Лог = Логирование.ПолучитьЛог("oscript.lib.1bom-ru");
	
КонецПроцедуры

Процедура УстановитьТокенАвторизации(Токен) Экспорт
    ТокенАвторизации = Токен;
КонецПроцедуры

Функция ПолучитьАдресСервиса() Экспорт
    Возврат АдресСервиса; 
КонецФункции

Функция СформироватьHTTPЗаголовки(ДобавлятьТокенАвторизации=Истина)
    Заголовки = Новый Соответствие();
    Заголовки.Вставить("Accept", 		"application/json");
    Заголовки.Вставить("Content-Type",  "application/json");
    Возврат Заголовки;
КонецФункции

Функция ВыполнитьЗапросHTTPЗапрос(Ресурс, ТипHTTPЗапроса = "POST")    
	
	ПараметрыЗапроса = Новый Соответствие();
    ПараметрыЗапроса.Вставить("access-token", ТокенАвторизации);
	
	АдресРесурса = ПолучитьАдресРесурса(Ресурс, ПараметрыЗапроса);
	HTTPЗаголовок= СформироватьHTTPЗаголовки();
		
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, HTTPЗаголовок);

    //Лог.Отладка(ПолучитьАдресРесурса(Ресурс, ПараметрыЗапроса));

	Если ТипHTTPЗапроса = "POST" тогда
		HTTPОтвет = мHTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	ИначеЕсли ТипHTTPЗапроса = "GET" тогда
		HTTPОтвет = мHTTPСоединение.Получить(HTTPЗапрос);
	КонецЕсли;	

    Если HTTPОтвет.КодСостояния = 200 Тогда        
        СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		
		Если Лев(СтрокаОтвета, 6)="<html>" тогда
		//Вместо ожидаемой строки JSON сервер вернул HTML с ошибкой, прочитать её
			ЧтениеHTML = Новый ЧтениеHTML;
			ЧтениеHTML.УстановитьСтроку(СтрокаОтвета);
			//  ответы маленькие по этому используем ДОМ
			ПостроительDOM = Новый ПостроительDOM;
			ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);
			
			Данные = Новый Структура;
			Данные.Вставить("data" , Неопределено);
			Данные.Вставить("error" , Сред(ДокументHTML.Заголовок, 4) ); //Описание ошибки из заголовка
			Данные.Вставить("statusCode", Лев (ДокументHTML.Заголовок, 3)); //Код ответа
			Данные.Вставить("СтрокаОтвета", СтрокаОтвета); ///Для записи запроса и ответа в журнал в случае ошибки
			
			Возврат Данные;
		Иначе  
			//Лог.Отладка(СтрокаОтвета);
			//Объект =  мПарсерJSON.ПрочитатьJSON_OS(СтрокаОтвета,,,Истина);
			//Возврат Объект;
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(СтрокаОтвета); 
			ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
			ДанныеJSON.Вставить("СтрокаОтвета", СтрокаОтвета); ///Для записи запроса и ответа в журнал в случае ошибки
			
			Возврат ДанныеJSON;
		КонецЕсли;
		
	КонецЕсли;

    ВызватьИсключение ИсключениеРаботыСПорталом(HTTPОтвет, "ВыполнитьЗапросHTTPЗапрос");
КонецФункции

Функция ПолучитьАдресРесурса(Ресурс, ПараметрыЗапроса=Неопределено, Относительный=Истина) Экспорт

    СтрокаЗапроса = ?(ПараметрыЗапроса = Неопределено, "", СформироватьСтрокуЗапроса(ПараметрыЗапроса));
    Если НЕ ПустаяСтрока(СтрокаЗапроса) Тогда
        СтрокаЗапроса = "?" + СтрокаЗапроса;
    КонецЕсли;

    Возврат ?(Относительный, "", ПолучитьАдресСервиса()) + Ресурс + СтрокаЗапроса; 

КонецФункции

Функция ИсключениеРаботыСПорталом(HTTPОтвет, МеткаДляОтладки="")
    ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
    
    Попытка 
        ОбъектОшибки = мПарсерJSON.ПрочитатьJSON_OS(ТелоОтвета,,,Истина);
        ОписаниеОшибки = ОбъектОшибки.description;
    Исключение
        ОписаниеОшибки = ТелоОтвета;
    КонецПопытки;
    
    //ТекстИсключения = СтрШаблон("Портал ответил кодом ошибки %1: %2", HTTPОтвет.КодСостояния, ОписаниеОшибки);
	ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Портал ответил кодом ошибки %1: %2", HTTPОтвет.КодСостояния, ОписаниеОшибки);

    //Лог.Ошибка(?(ПустаяСтрока(МеткаДляОтладки), "", " [" + МеткаДляОтладки + "] ") + ТекстИсключения);
    
    Возврат ТекстИсключения;
КонецФункции

// Формирует строку запроса в формате URL-encoded (query string)
Функция СформироватьСтрокуЗапроса(ПараметрыЗапроса) Экспорт
    СтрокаЗапроса = "";
    
    Если ПараметрыЗапроса.Количество() > 0 Тогда
        Для каждого Элемент из ПараметрыЗапроса Цикл
            Если НЕ ПустаяСтрока(СтрокаЗапроса) Тогда
                СтрокаЗапроса = СтрокаЗапроса + "&";
            КонецЕсли;
            СтрокаЗапроса = СтрокаЗапроса + КодироватьСтроку(Элемент.Ключ, СпособКодированияСтроки.КодировкаURL) + 
                "=" + КодироватьСтроку(Значение1СвЗначениеJS(Элемент.Значение), СпособКодированияСтроки.КодировкаURL);
        КонецЦикла;
    КонецЕсли;
    
    Возврат СтрокаЗапроса;
КонецФункции

Функция СформироватьСтруктуруПараметровЗапроса(СтрокаИменДопустимыхПараметров, СтруктураОбязательныхПараметров, СтруктураДополнительныхПараметров=Неопределено) Экспорт
    СтруктураПараметровЗапроса    = Новый Структура;
    СтруктураДопустимыхПараметров = Новый Структура(СтрокаИменДопустимыхПараметров);

    Если СтруктураОбязательныхПараметров <> Неопределено Тогда
        ДобавитьПараметры(СтруктураПараметровЗапроса, СтруктураОбязательныхПараметров, СтруктураДопустимыхПараметров);
    КонецЕсли;

    Если СтруктураДополнительныхПараметров <> Неопределено Тогда
        ДобавитьПараметры(СтруктураПараметровЗапроса, СтруктураДополнительныхПараметров, СтруктураДопустимыхПараметров);
    КонецЕсли;

    Возврат СтруктураПараметровЗапроса;
КонецФункции

Процедура ДобавитьПараметры(СтруктураПараметровЗапроса, СтруктураСоЗначениямиПараметров, СтруктураДопустимыхПараметров)
    Для каждого ЭлементСтруктуры из СтруктураСоЗначениямиПараметров Цикл        
        Если НЕ СтруктураДопустимыхПараметров.Свойство(ЭлементСтруктуры.Ключ) Тогда
            ВызватьИсключение ИсключениеНедопустимыйПараметрЗапроса(ЭлементСтруктуры.Ключ);
        КонецЕсли;                       
        СтруктураПараметровЗапроса.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
    КонецЦикла;
КонецПроцедуры

Функция Значение1СвЗначениеJS(Значение)
    Тип = ТипЗнч(Значение);
    Если (Значение = Неопределено) или (Значение = Null) Тогда 
        Возврат "null";
    ИначеЕсли (Тип = Тип("Дата")) Тогда 
        Возврат """" + ДатаJSON(Значение) + "Z""";
    ИначеЕсли Тип = Тип("Булево") Тогда
        Возврат ?(Значение = Истина, "true", "false");
    ИначеЕсли (Тип = Тип("УникальныйИдентификатор")) Тогда 
        Возврат """" + Значение + """"; 
    КонецЕсли;
    Возврат Строка(Значение);
КонецФункции

Функция ДатаJSON(Знач Дата)
    
    Если Не ЗначениеЗаполнено(Дата) Тогда
        Возврат "";
    КонецЕсли;
    
    Возврат "" + Год(Дата) + "-" + ФорматДвузначноеЧисло(Месяц(Дата)) + "-" + ФорматДвузначноеЧисло(День(Дата)) + "T"
            + ФорматДвузначноеЧисло(Час(Дата)) + ":" + ФорматДвузначноеЧисло(Минута(Дата)) + ":" + ФорматДвузначноеЧисло(Секунда(Дата));

КонецФункции

Функция ФорматДвузначноеЧисло(ЗначениеЧисло)
    С = Строка(ЗначениеЧисло);
    Если СтрДлина(С) < 2 Тогда
        С = "0" + С;
    КонецЕсли;    
    Возврат С;
КонецФункции

Функция ИсключениеНедопустимыйПараметрЗапроса(ИмяПараметра)
    Возврат "В запрос передан недопустимый параметр " + ИмяПараметра;
КонецФункции

//Инициализировать();
